%YAML 1.2
---
name: Valve Material Format
file_extensions: [vmt]
scope: source.valve.keyvalues.vmt

variables:
  float: '[+-]?([0-9]*[.])?[0-9]+'

contexts:
  inc_comments:
    - match: '//'
      scope: punctuation.definition.comment.keyvalues
      push: comment
  comment:
    - meta_scope: comment.line.keyvalues
    - match: '\n'
      pop: true

  # The shader name first!
  main:
    - include: inc_comments
    - match: '[a-zA-Z_]+'
      scope: entity.name.class.vmt.shader
      push: expect-start-brace
    - match: '"'
      scope: punctuation.definition.string.begin.keyvalues
      push: shader-name

  shader-name:
    - meta_scope: entity.name.class.vmt.shader
    - match: '"'
      set: expect-start-brace


  # After the shader name, the first brace must be present.
  expect-start-brace:
    - include: inc_comments
    - match: '{'
      scope: punctuation.section.block.begin.vmt
      set: shader-params
    - match: '\w'
      scope: invalid.illegal.stray-char
      set:
        - meta_scope: invalid.illegal.stray-char

  # Actual main content.
  shader-params:
    - include: inc_comments
    - meta_scope: meta.block
    - match: '}'
      scope: punctuation.section.block.end.vmt
      set:
        # End of doc, everything invalid.
        - include: inc_comments
        - match: '.'
          scope: invalid.illegal.footer

    - match: '[$%]'
      scope: punctuation.definition.keyword
      push: unquoted-key
    - match: '[a-zA-Z_0-9]+'
      scope: keyword.other.vmt.shader_key
      push: pre_value
    - match: '"'
      scope: punctuation.definition.string.begin.vmt_key
      push: quoted-key
    - match: '{'
      scope: punctuation.section.block.begin.vmt
      push: block
    - match: '\S'
      scope: invalid.illegal.other

  quoted-key:
    - meta_scope: keyword.other.vmt.shader_key
    - match: '"'
      scope: punctuation.definition.string.end.vmt_key
      set: pre_value

  unquoted-key:
    - meta_scope: keyword.other.vmt.shader_key
    - match: '"'
      scope: invalid.illegal.stray-quote
    - match: '\s'
      set: pre_value

  # $key <here> "value"
  pre_value:
    - meta_scope: vmt.pre_value
    - match: '//'
      scope: punctuation.definition.comment.keyvalues invalid.illegal.no-value
      set: comment
    - match: '\n'
      pop: true
    - match: '{{float}}'
      scope: constant.numeric.float
      set: require-newline # Must be a newline next.

    - match: '(\")\s*(\[)'
      captures:
        1: punctuation.definition.string.begin.vmt-value string.quoted.double.vmt-value
        2: punctuation.section.sequence.begin.vmt-vector punctuation.section.brackets.begin
      set: vector-value-brack
    - match: '(\")\s*(\{)'
      captures:
        1: punctuation.definition.string.begin.vmt-value string.quoted.double.vmt-value
        2: punctuation.section.sequence.begin.vmt-vector punctuation.section.braces.begin
      set: vector-value-brace
    - match: '(\")\s*(center)'
      captures:
        1: punctuation.definition.string.begin.vmt-value string.quoted.double.vmt-value
        2: keyword.other.vmt.matrix
      set: matrix-value-center

    - match: '"'
      scope: punctuation.definition.string.begin.vmt-value
      set: quoted-value
    - match: '\$'
      scope: punctuation.definition.keyword
      set: unquoted-value
    - match: '[-/]'
      scope: punctuation.separator.sequence.file
    - match: '[a-zA-Z_0-9]+'
      scope: string.quoted.double.vmt-value
    # Anything else should be quoted. So match a non-whitespace,
    # then include anything after that (so text is also illegal).
    - match: '\S.*'
      scope: invalid.illegal.vmt.must-be-quoted

  unquoted-value:
    - meta_scope: string.unquoted.vmt-value meta.string.vmt-value
    - match: '\n|\s'
      pop: true

  quoted-value:
    - meta_scope: string.quoted.double.vmt-value meta.string.vmt-value
    - match: '[-/]'
      scope: punctuation.separator.sequence.file
    - match: '"'
      scope: punctuation.definition.string.end.vmt-value
      pop: true

  block:
    - meta_scope: meta.block
    - match: '}'
      scope: punctuation.section.block.end.vmt
      pop: true
    - include: shader-params

  require-newline:
    - include: inc_comments
    - match: '\n'
      pop: true
    - match: '\w'
      scope: invalid.illegal.stray-char

  # [ 0 0 0 ] value. 1-3 for vectors, 16 for a matrix.
  vector-value-brack:
    - match: '{{float}}'
      scope: constant.numeric.float
    - match: '(])\s*(")'
      captures:
        1: punctuation.section.sequence.end.vmt-vector punctuation.section.brackets.end
        2: punctuation.definition.string.end.vmt-vector string.quoted.double.vmt-value
      pop: true
    - match: '[\[\]{}]'
      scope: invalid.illegal.stray-char
      pop: true
    - match: '.'
      scope: string.quoted.double.vmt-value

  # {0 0.5 0 } value
  vector-value-brace:
    - meta_scope: string.quoted.double.vmt-value
    - match: '{{float}}'
      scope: constant.numeric.float
    - match: '(})\s*(")'
      captures:
        1: punctuation.section.sequence.end.vmt-vector punctuation.section.braces.end
        2: punctuation.definition.string.end.vmt-vector string.quoted.double.vmt-value
      pop: true
    - match: '[\[\]{}]'
      scope: invalid.illegal.stray-char
      pop: true

  # Matrix value, which must be in a certain order.
  # "center .5 .5 scale 1 1 rotate 0 translate 0 0"
  matrix-value-common:
    - match: '({{float}})'
      scope: constant.numeric.float
    - match: '"'
      scope: invalid.illegal.premature-end
      pop: true
    - match: '\S.*'
      scope: invalid.illegal.stray-char
      pop: true

  matrix-value-center:
    - meta_scope: string.quoted.double.vmt-value
    - match: scale
      scope: keyword.other.vmt
      set: matrix-value-scale
    - match: "s(c(a(le?)?)?)?" # Don't error while typing this.
      scope: keyword.other.vmt
    - include: matrix-value-common

  matrix-value-scale:
    - meta_scope: string.quoted.double.vmt-value
    - match: rotate
      scope: keyword.other.vmt
      set: matrix-value-rotate
    - match: 'r(o(t(a(te?)?)?)?)?'
    - include: matrix-value-common

  matrix-value-rotate:
    - meta_scope: string.quoted.double.vmt-value
    - match: translate
      scope: keyword.other.vmt
      set: matrix-value-translate
    - match: 't(r(a(n(s(l(a(te?)?)?)?)?)?)?)?'
      scope: keyword.other.vmt
    - include: matrix-value-common

  matrix-value-translate:
    - meta_scope: string.quoted.double.vmt-value
    - match: '"' # Now valid here
      scope: punctuation.definition.string.end.vmt-value
      pop: true
    - include: matrix-value-common
